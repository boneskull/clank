#!/usr/bin/env bash
# skills-search - Find relevant skills using grep patterns
# Logs all searches for gap analysis (gardening skill processes the log)

set -euo pipefail

# Detect if running from repo or installed location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ "$SCRIPT_DIR" == *"/.claude/skills/getting-started" ]]; then
    # Installed location
    SKILLS_DIR="${HOME}/.claude/skills"
else
    # Running from repo
    SKILLS_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

LOG_FILE="${SKILLS_DIR}/.search-log.jsonl"

# Show usage if no arguments
if [[ $# -eq 0 ]]; then
    cat <<'EOF'
Usage: skills-search PATTERN [PATTERN...]

Searches skills using grep patterns.

Examples:
  skills-search 'test.*driven|TDD'
  skills-search 'debug.*systematic|root.cause'
  skills-search 'refactor|extract'
  skills-search 'async.*test|flaky|timeout'
  skills-search 'validat.*input'

The search is logged. Failed searches help identify missing skills.
EOF
    exit 1
fi

# Log the search for gap analysis
timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
query="$*"
echo "{\"timestamp\":\"$timestamp\",\"query\":\"$query\"}" >> "$LOG_FILE" 2>/dev/null || true

# Search all SKILL.md files
results=$(grep -r "$@" "$SKILLS_DIR" --include="SKILL.md" -l 2>/dev/null || true)

if [[ -z "$results" ]]; then
    echo "❌ No skills found matching: $*"
    echo ""
    echo "Search logged. If a skill should exist, it will be created."
    echo "Proceed carefully - document your approach."
    exit 1
fi

echo "✅ Found skills:"
echo ""

# Display results with metadata
echo "$results" | while read -r file; do
    # Extract description from frontmatter
    description=$(grep "^description:" "$file" 2>/dev/null | sed 's/description: *//' || echo "")

    # Get absolute path with @skills/ prefix
    rel_path="@skills/${file#$SKILLS_DIR/}"

    if [[ -n "$description" ]]; then
        echo "$rel_path - $description"
    else
        echo "$rel_path"
    fi
done

echo ""

exit 0
